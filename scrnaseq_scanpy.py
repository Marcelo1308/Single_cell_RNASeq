# -*- coding: utf-8 -*-
"""scRNAseq_Scanpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_cnN922UKwkH_eMK-KWQDvkZqNV4Rgc_
"""

!pip install scanpy

import scanpy as sc

"""Load data"""

adata = sc.read_csv(file.name).T #Scanpy needs cells in rows and genes in columns
adata #AnnData object
adata.obs #cells
adata.var #genes
adata.X #counts
adata.X #cells by genes

"""Doublet removal"""

!pip install scvi.tools
import scvi

#Filter genes
sc.pp.filter_genes(adata, min_cells=10)
sc.pp.highly_variable_genes(adata, n_top_genes=2000, subset=True, flavor= 'seurat_v3')

#Model to predict *doublets*
scvi.model.SCVI.setup_anndata(adata)
vae = scvi.model.SCVI(adata)
vae.train()
solo = scvi.external.SOLO.from_scvi_model(vae)
solo.train()
solo.predict()
df = solo.predict()
df['prediction'] = solo.predict(soft = False)
df.index = df.index.map(lambda x: x[:-2])
df.groupby('prediction').count()
df['dif'] = df.doublet - df.singlet

import seaborn as sns

sns.displot(df[df.prediction == 'doublet'], x = 'dif')

doublets = df[(df.prediction == 'doublet')& (df.dif > 1)]
doublets
adata

adata = sc.read_csv(file.name).T
adata.obs['doublet'] = adata.obs.index.isin(doublets.index)
adata.obs

"""Preprocessing

QC filtering (mitochondrial genes)
"""

adata.var['mt'] = adata.var[adata.var.index.str.startwith('MT-')]
import pandas as pd
ribo_url = "http://software.broadinstitute.org/gsea/msigdb/download_geneset.jsp?geneSetName=KEGG_RIBOSOME&fileType=txt"
ribo_genes = pd.read_table(ribo_url, skiprows=2, header = None)
adata.var['ribo'] = adata.var_names.isin(ribo_genes[0].values)
adata.obs
sc.pp.calculate_qc_metrics(adata, qc_vars=['mt', 'ribo'], percent_top=None, log1p=False, inplace=True)
adata.var.sort_values('n_cells_by_counts')
sc.pp.filter_genes(adata, min_cells=3)
adata.var.sort_values('n_cells_by_counts')
adata.obs.sort_values('n_genes_by_counts')
sc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt', 'pct_counts_ribo'],
             jitter=0.4, multi_panel=True)
import numpy as np
upper_lim = np.quantile(adata.obs.n_genes_by_counts.values, .98)
adata = adata[adata.obs.n_genes_by_counts < upper_lim]
adata = adata[adata.obs.pct_counts_mt < 20]
adata = adata[adata.obs.pct_counts_ribo < 2]
adata

"""Normalization"""

adata.X.sum(axis = 1)
sc.pp.normalize_total(adata, target_sum=1e4) #normalize every cell to 10,000 UMI
adata.X.sum(axis = 1)
sc.pp.log1p(adata) #change to log counts
adata.X.sum(axis = 1)
adata.raw = adata

"""Clustering"""

sc.pp.highly_variable_genes(adata, n_top_genes = 2000)
sc.pl.highly_variable_genes(adata)
adata = adata[:, adata.var.highly_variable]
sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt', 'pct_counts_ribo'])
sc.pp.scale(adata, max_value=10)
sc.tl.pca(adata, svd_solver='arpack')
sc.pl.pca_variance_ratio(adata, log=True, n_pcs = 50)

sc.pp.neighbors(adata, n_pcs = 30)
sc.tl.umap(adata)
sc.pl.umap(adata)
sc.tl.leiden(adata, resolution = 0.5)
sc.pl.umap(adata, color=['leiden'])